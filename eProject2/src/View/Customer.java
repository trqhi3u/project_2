/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import controller.CurrentStockDAO;
import controller.CustomerDAO;
import controller.ProductDAO;
import controller.RecordDAO;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import model.Record;
import model.RecordDetail;

/**
 *
 * @author Flynn
 */
public class Customer extends javax.swing.JDialog {

    model.Customer customer;
    ArrayList<model.Customer> customers;
    ArrayList<Record> records;
    ArrayList<RecordDetail> rcdts;
    DefaultTableModel model;

    /**
     * Creates new form Customer
     */
    public Customer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        searchByTab = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerList = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        CustomerOrder = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("SEARCH");

        searchByTab.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchByTabKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 204));
        jLabel4.setText("CUSTOMER");

        refresh.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-repeat-48.png"))); // NOI18N
        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        customerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Name", "Code", "Address", "Phone", "Total"
            }
        ));
        customerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customerList);

        jTabbedPane2.addTab("Customer List", jScrollPane1);

        CustomerOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Customer", "Order", "Prod Name", "Qty", "Total Price", "Date"
            }
        ));
        jScrollPane2.setViewportView(CustomerOrder);

        jTabbedPane1.addTab("Customer Order", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(refresh)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel4)
                            .addGap(407, 407, 407)
                            .addComponent(jLabel6)
                            .addGap(27, 27, 27)
                            .addComponent(searchByTab, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(107, 107, 107))
                        .addComponent(back, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                .addComponent(searchByTab, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchByTabKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByTabKeyReleased
        // TODO add your handling code here:
        String text = searchByTab.getText();
        loadBySearch(text);
    }//GEN-LAST:event_searchByTabKeyReleased

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        loadData();
    }//GEN-LAST:event_refreshActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        dashboard d = new dashboard();
        d.setVisible(true);
        this.hide();
    }//GEN-LAST:event_backActionPerformed

    private void customerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerListMouseClicked
        // TODO add your handling code here:
        int row = customerList.getSelectedRow();
        customer = customers.get(row);
        records = new RecordDAO().findAll("WHERE customerID = '" + customer.getCustomerID() + "'");
        getRecordDetail();

    }//GEN-LAST:event_customerListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Customer dialog = new Customer(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CustomerOrder;
    private javax.swing.JButton back;
    private javax.swing.JTable customerList;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField searchByTab;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        records = new RecordDAO().findAll("WHERE recordType = 'EXPORT'");
        getRecordDetail();
        customers = new CustomerDAO().convertToArrayList(new CustomerDAO().getQueryResult("1"));
        getRecord(customers);
    }

    private void loadBySearch(String text) {

        customers = new CustomerDAO().convertToArrayList(new CustomerDAO().getSearchCustomerQueryResult(text));
        if (!customers.isEmpty()) {
            records = new RecordDAO().findAll("WHERE customerID = '" + customers.get(0).getCustomerID() + "'");
        } else {
            return;
        }
        getRecord(customers);
        getRecordDetail();
    }

    private float getTotal(model.Customer customer) {
        float sum = 0;
        records = new RecordDAO().findAll("WHERE customerID = '" + customer.getCustomerID() + "'");
        for (Record record : records) {
            sum += record.getTotalPrice();
        }
        return sum;
    }

    private void getRecordDetail() {
        model = (DefaultTableModel) CustomerOrder.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        int index = 1;
        for (Record record : records) {
            rcdts = new RecordDAO().getSearchRecordDetailQueryResult(record);
            customer = new CustomerDAO().convertToArrayList(new CustomerDAO().getQueryResult("customerID = '" + record.getCustomerID() + "'")).get(0);

            for (RecordDetail rcdt : rcdts) {
                model.Product product = new ProductDAO().convertToArrayList(new ProductDAO().getQueryResult("productID = '" + rcdt.getProductID() + "'")).get(0);
                model.addRow(new Object[]{
                    index + rcdts.indexOf(rcdt),
                    customer.getCustomerName(),
                    record.getRecordCode(),
                    product.getProductName(),
                    rcdt.getQuantity(),
                    rcdt.getQuantity() * product.getSellingPrice(),
                    record.getDate()
                });
            }
            index += rcdts.size();
        }
    }

    private void getRecord(ArrayList<model.Customer> customers) {
        model = (DefaultTableModel) customerList.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        for (model.Customer customer : customers) {
            model.addRow(new Object[]{
                customers.indexOf(customer) + 1,
                customer.getCustomerName(),
                customer.getCustomerCode(),
                customer.getCustomerAddress(),
                customer.getCustomerPhone(),
                getTotal(customer)
            });
        }
    }

}
