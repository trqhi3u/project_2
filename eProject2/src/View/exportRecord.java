/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import controller.CurrentStockDAO;
import controller.CustomerDAO;
import controller.ProductDAO;
import controller.RecordDAO;
import controller.SupplierDAO;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Constant;
import model.Customer;
import model.Product;
import model.RecordDetail;
import model.RecordType;
import model.Supplier;

/**
 *
 * @author THINH PC
 */
public class exportRecord extends javax.swing.JDialog {

    model.Customer customer;
    model.Product product;
    model.RecordDetail recordDetail;
    ArrayList<RecordDetail> recordDetails;
    ArrayList<String> suppliers;
    Supplier supplier;
    model.Record record;
    DefaultTableModel model;
    int taxPercent;
    String customerStatus;

    /**
     * Creates new form exportRecord
     */
    public exportRecord(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialRecord();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        productCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sellingPrice = new javax.swing.JTextField();
        productQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        customerAddress = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        customerPhone = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        customerCode = new javax.swing.JTextField();
        date = new com.toedter.calendar.JDateChooser();
        customerName1 = new javax.swing.JTextField();
        refresh = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        searchByTab = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        invoice = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recordTable = new javax.swing.JTable();
        vat = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        subtotal = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        tax = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        receiptCode = new javax.swing.JTextField();
        customerCode2 = new javax.swing.JTextField();
        receiptDate = new javax.swing.JFormattedTextField();
        comment = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        customerName2 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        customerAddress2 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        customerPhone2 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        createRecord = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Date");

        jLabel2.setText("Product Code");

        productCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productCodeKeyPressed(evt);
            }
        });

        jLabel3.setText("Selling Price");

        sellingPrice.setEditable(false);
        sellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellingPriceActionPerformed(evt);
            }
        });

        productQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productQuantityActionPerformed(evt);
            }
        });
        productQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productQuantityKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productQuantityKeyReleased(evt);
            }
        });

        jLabel4.setText("Quantity");

        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-buy-26.png"))); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-remove-26.png"))); // NOI18N
        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-edit-26.png"))); // NOI18N
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-clear-symbol-24.png"))); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        jLabel23.setText("Customer name");

        jLabel24.setText("Customer address");

        customerAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerAddressActionPerformed(evt);
            }
        });

        jLabel25.setText("Customer phone");

        customerPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerPhoneActionPerformed(evt);
            }
        });

        jLabel26.setText("Customer Code");

        customerCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerCodeActionPerformed(evt);
            }
        });
        customerCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerCodeKeyPressed(evt);
            }
        });

        customerName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerName1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel23)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerCode)
                            .addComponent(productQuantity)
                            .addComponent(sellingPrice)
                            .addComponent(productCode)
                            .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                            .addComponent(customerName1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customerAddress))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(18, 18, 18)
                        .addComponent(customerPhone))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edit)
                            .addComponent(add))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(clear)
                                .addGap(16, 16, 16))
                            .addComponent(remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(productCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(productQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(customerCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17)
                        .addGap(125, 125, 125))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(customerName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(customerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(customerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clear)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remove)
                            .addComponent(edit))
                        .addGap(175, 175, 175))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(add)
                        .addGap(242, 242, 242))))
        );

        jTabbedPane1.addTab("Post goods receipt", jPanel1);

        refresh.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-repeat-64.png"))); // NOI18N
        refresh.setText("Refesh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 102, 204));
        jLabel20.setText("Goods Issue");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setText("SEARCH");

        searchByTab.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchByTabKeyPressed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        invoice.setBackground(new java.awt.Color(204, 255, 204));
        invoice.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 204, 0));
        jLabel9.setText("POST GOOD RECEIPT");

        jLabel10.setText("Receipt Code");

        jLabel11.setText("Customer Inv. No:");

        jLabel12.setText("Date:");

        recordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Item name", "Code", "Qyt", "Unit price", "VAT", "Total"
            }
        ));
        recordTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recordTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(recordTable);

        vat.setText("Prices Include VAT");
        vat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vatActionPerformed(evt);
            }
        });

        jLabel13.setText("Comment:");

        jLabel14.setText("Subtotal:");

        subtotal.setEditable(false);

        jLabel15.setText("Tax:");

        tax.setEditable(false);

        jLabel16.setText("Total:");

        total.setEditable(false);

        receiptCode.setEditable(false);

        customerCode2.setEditable(false);

        receiptDate.setEditable(false);
        receiptDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));

        jLabel27.setText("Customer name");

        customerName2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerName2ActionPerformed(evt);
            }
        });

        jLabel28.setText("Customer address");

        customerAddress2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerAddress2ActionPerformed(evt);
            }
        });

        jLabel29.setText("Customer phone");

        customerPhone2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerPhone2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invoiceLayout = new javax.swing.GroupLayout(invoice);
        invoice.setLayout(invoiceLayout);
        invoiceLayout.setHorizontalGroup(
            invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invoiceLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(invoiceLayout.createSequentialGroup()
                        .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(invoiceLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(invoiceLayout.createSequentialGroup()
                                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(receiptCode, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(customerCode2, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(receiptDate))
                                .addGap(115, 115, 115)
                                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel27))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerName2)
                                    .addComponent(customerAddress2)
                                    .addComponent(customerPhone2))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoiceLayout.createSequentialGroup()
                        .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(invoiceLayout.createSequentialGroup()
                                .addComponent(vat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14)
                                .addGap(27, 27, 27)
                                .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(invoiceLayout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoiceLayout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(27, 27, 27)
                                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoiceLayout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(27, 27, 27)
                                        .addComponent(tax, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(36, 36, 36))))
        );
        invoiceLayout.setVerticalGroup(
            invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(receiptCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(customerName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28)
                        .addComponent(customerAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(customerCode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel29)
                        .addComponent(customerPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(receiptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vat)
                    .addComponent(jLabel14)
                    .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(tax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(invoiceLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(invoiceLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(invoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(invoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-print-26.png"))); // NOI18N
        jButton7.setText("Print");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        createRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-purchase-order-26.png"))); // NOI18N
        createRecord.setText("Sell");
        createRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRecordActionPerformed(evt);
            }
        });

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-delete-26.png"))); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(refresh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel20)
                                .addGap(0, 244, Short.MAX_VALUE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createRecord)
                        .addGap(79, 79, 79)
                        .addComponent(delete)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(searchByTab, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(refresh))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchByTab, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21)))
                            .addComponent(jLabel20))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(createRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            try {
                // TODO add your handling code here:
                String text = productCode.getText();
                if (!new ProductDAO().getQueryResult("productCode = '" + text + "'").next()) {
                    JOptionPane.showMessageDialog(null, "This product is not exist or wrong product code!");
                } else {
                    product = new ProductDAO().convertToArrayList(new ProductDAO().getQueryResult("productCode = '" + productCode.getText() + "'")).get(0);
                    sellingPrice.setText(Float.toString(product.getSellingPrice()));

                }
            } catch (SQLException ex) {
                Logger.getLogger(exportRecord.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_productCodeKeyPressed

    private void sellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sellingPriceActionPerformed

    private void productQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productQuantityActionPerformed
    public void initialRecord() {
        model = (DefaultTableModel) recordTable.getModel();
        recordDetails = new ArrayList<>();
        record = new model.Record();
        record.setHandleBy(login.user.getId());
        customer = new Customer();
        receiptCode.setEditable(false);
        customerCode2.setEditable(false);
        receiptDate.setEditable(false);
        customerName2.setEditable(false);
        customerAddress2.setEditable(false);
        customerPhone2.setEditable(false);

    }
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        recordDetail = new RecordDetail();
        if (productCode.getText().equals("") || date.getDateFormatString().equals("") || productQuantity.getText().equals("") || customerCode.getText().equals("") || customerName2.equals("") || customerAddress.equals("") || customerPhone.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all the fields!");
        } else {
            if (recordDetails.size() > 0) {//TH da co sp trong record
                try {
                    if (!record.getDate().equals(new SimpleDateFormat("yyyy/MM/dd").format(date.getDate()))) {
                        JOptionPane.showConfirmDialog(null, "Would you like to change record date?");
                        if (JOptionPane.YES_NO_OPTION == JOptionPane.YES_OPTION) {
                            record.setDate(new SimpleDateFormat("yyyy/MM/dd").format(date.getDate()));
                        }
                    }
                    date.setDate(new SimpleDateFormat("yyyy/MM/dd").parse(record.getDate()));
                    //check existed prod
                    if (isExisted(product.getProductCode()) != -1) {
                        int index = isExisted(product.getProductCode());
                        int newQuantity = recordDetails.get(index).getQuantity() + Integer.parseInt(productQuantity.getText());
                        if (checkQuantity(newQuantity, recordDetails.get(index).getProductID()) == false) {
                            return;
                        }
                        model.setValueAt(Integer.toString(newQuantity), index, 3);
                        recordDetails.get(index).setQuantity(newQuantity);
                    } else {
                        //create new recordDetail
                        recordDetail.setProductID(product.getProductID());
                        int quantity = Integer.parseInt(productQuantity.getText());
                        if (checkQuantity(quantity,recordDetail.getProductID()) == false) {
                            return;
                        }
                        recordDetail.setQuantity(quantity);
                        recordDetails.add(recordDetail);
                        //update record
                        record.setTotalPrice(getTotalPrice());
                        if (vat.isSelected()) {
                            showInvoice(Constant.VAT);
                        } else {
                            showInvoice(Constant.NO_VAT);
                        }
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(exportRecord.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else { //TH chua co sp nao trong record
                //create new recordDetail
                recordDetail.setProductID(product.getProductID());
                int quantity = Integer.parseInt(productQuantity.getText());
                if (checkQuantity(quantity,recordDetail.getProductID()) == false) {
                    return;
                }
                recordDetail.setQuantity(quantity);
                recordDetails.add(recordDetail);
                //set record

                record.setDate(new SimpleDateFormat("yyyy/MM/dd").format(date.getDate()));
                record.setRecordType(RecordType.EXPORT);
                //record.setHandleBy(WIDTH);
                record.setTotalPrice(getTotalPrice());
                if (customerName1.getText().equals(customer.getCustomerName()) && customerAddress.getText().equals(customer.getCustomerAddress()) && customerPhone.getText().equals(customer.getCustomerPhone())) {
                    customerStatus = "EXISTED";
                    record.setCustomerID(customer.getCustomerID());
                } else if (customerName1.getText().equals(customer.getCustomerName()) | customerAddress.getText().equals(customer.getCustomerAddress()) | customerPhone.getText().equals(customer.getCustomerPhone())) {
                    customerStatus = "UPDATE";
                } else {
                    customerStatus = "NEW";
                }
                customerAddress2.setText(customerAddress.getText());
                customerPhone2.setText(customerPhone.getText());
                customerName2.setText(customerName1.getText());
                //show table
                if (vat.isSelected()) {
                    showInvoice(Constant.VAT);
                } else {
                    showInvoice(Constant.NO_VAT);
                }
            }
        }

    }//GEN-LAST:event_addActionPerformed
    private float getTotalPrice() {
        float total = 0;
        for (RecordDetail rcdt : recordDetails) {
            total += rcdt.getQuantity() * Float.parseFloat(new RecordDAO().getInfo("products", "sellingPrice", "WHERE productID = '" + rcdt.getProductID() + "'").get(0));
        }
        return total;
    }

    public int isExisted(String productCode) {
        int result = -1;
        for (int i = 0; i < recordDetails.size(); i++) {
            String output = new RecordDAO().getInfo("products", "productCode", "WHERE productID = '" + recordDetails.get(i).getProductID() + "'").get(0);
            if (productCode.toLowerCase().equals(output.toLowerCase())) {
                result = i;
                break;
            }
        }
        return result;
    }

    private void showInvoice(int taxValue) {
        customerCode2.setText((customer.getCustomerCode()));
        receiptDate.setText(record.getDate());
        subtotal.setText(Float.toString(record.getTotalPrice()));
        if (vat.isSelected()) {
            taxPercent = Constant.VAT;
        } else {
            taxPercent = Constant.NO_VAT;
        }
        tax.setText(Integer.toString(taxPercent));
        total.setText(Float.toString(record.getTotalPrice() * (100 + taxPercent) / 100));
        productCode.setText("");
        sellingPrice.setText("");
        productQuantity.setText("");

        model.addRow(new Object[]{
            model.getRowCount() + 1,
            product.getProductName(),
            product.getProductCode(),
            recordDetail.getQuantity(),
            product.getSellingPrice(),
            taxValue,
            product.getSellingPrice() * recordDetail.getQuantity()
        });

    }

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed

        if (recordTable.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Select a table data first!");
        } else {
            int row = recordTable.getSelectedRow();

            model.setValueAt(product.getProductName(), row, 1);
            model.setValueAt(productCode.getText(), row, 2);
            model.setValueAt(productQuantity.getText(), row, 3);
            model.setValueAt(sellingPrice.getText(), row, 4);

            recordDetails.get(row).setProductID(product.getProductID());
            recordDetails.get(row).setQuantity(Integer.parseInt(productQuantity.getText()));
            productCode.setText("");
            sellingPrice.setText("");
            productQuantity.setText("");

        }
    }//GEN-LAST:event_editActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        date.setDateFormatString("");
        productCode.setText("");
        productQuantity.setText("");
        sellingPrice.setText("");
        customerCode.setText("");
        customerAddress.setText("");
        customerName1.setText("");
        customerPhone.setText("");

    }//GEN-LAST:event_clearActionPerformed

    private void customerName2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerName2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerName2ActionPerformed

    private void customerAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerAddressActionPerformed

    private void customerPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerPhoneActionPerformed

    private void customerCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerCodeActionPerformed

    private void customerCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                String text = customerCode.getText();
                if (new CustomerDAO().getQueryResult("customerCode = '" + text + "'").next()) {
                    customer = new CustomerDAO().convertToArrayList(new CustomerDAO().getQueryResult("customerCode = '" + customerCode.getText() + "'")).get(0);
                    customerName1.setText((customer.getCustomerName()));
//                    customerName2.setText((customer.getCustomerName()));
                    customerAddress.setText((customer.getCustomerAddress()));
//                    customerAddress2.setText((customer.getCustomerAddress()));
                    customerPhone.setText((customer.getCustomerPhone()));
//                    customerPhone2.setText((customer.getCustomerPhone())); 
                    customerCode2.setText(customerCode.getText());
                }
            } catch (SQLException ex) {
                Logger.getLogger(exportRecord.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_customerCodeKeyPressed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete? This action cannot be undone!", "WARNING",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            new RecordDAO().deleteRecord(record);
            newRecordActionPerformed(evt);
        } else {
        }
    }//GEN-LAST:event_deleteActionPerformed
    private void newRecordActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        initialRecord();
        add.setEnabled(true);
        remove.setEnabled(true);
        edit.setEnabled(true);
        clear.setEnabled(true);
        createRecord.setEnabled(true);
        vat.setEnabled(true);
//        for (Component control : invoice.getComponents()) {
//            if (control instanceof JTextField) {
//                JTextField ctrl = (JTextField) control;
//                ctrl.setText("");
//            } else if (control instanceof JComboBox) {
//                JComboBox ctrl = (JComboBox) control;
//                ctrl.setSelectedIndex(0);
//            }
//        }
    }
    private void createRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRecordActionPerformed
        // TODO add your handling code here:
        customer.setCustomerCode((customerCode.getText()));
        customer.setCustomerName(customerName1.getText());
        customer.setCustomerAddress(customerAddress.getText());
        customer.setCustomerPhone(customerPhone.getText());
        new CustomerDAO().add(customerStatus, customer);
        record.setCustomerID(new CustomerDAO().convertToArrayList(new CustomerDAO().getQueryResult("customerCode = '" + customer.getCustomerCode() + "'")).get(0).getCustomerID());
        new RecordDAO().addRecord(record, recordDetails);
        receiptCode.setText(record.getRecordCode());

        clearActionPerformed(evt);
        add.setEnabled(false);
        remove.setEnabled(false);
        edit.setEnabled(false);
        clear.setEnabled(false);
        createRecord.setEnabled(false);
        vat.setEnabled(false);
        comment.setEnabled(false);
    }//GEN-LAST:event_createRecordActionPerformed

    private void vatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vatActionPerformed
        if (vat.isSelected()) {
            taxPercent = Constant.VAT;
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(Integer.toString(Constant.VAT), i, 5);
            }
        } else {
            taxPercent = Constant.NO_VAT;
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(Integer.toString(Constant.NO_VAT), i, 5);
            }
        }
        tax.setText(Integer.toString(taxPercent));
        total.setText(Float.toString(record.getTotalPrice() * (100 + taxPercent) / 100));
    }//GEN-LAST:event_vatActionPerformed

    private void recordTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recordTableMouseClicked
        int row = recordTable.getSelectedRow();
        recordDetail = recordDetails.get(row);

        productCode.setText(product.getProductCode());
        productQuantity.setText(Integer.toString(recordDetail.getQuantity()));
    }//GEN-LAST:event_recordTableMouseClicked

    private void productQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productQuantityKeyPressed
        // TODO add your handling code here:
//        char c = evt.getKeyChar();
//        if(Character.isLetter(c) || Character.isWhitespace(c)) {
//            JOptionPane.showMessageDialog(comment, "You can input only number");
//            productQuantity.setText("");
//        }
//        }else if(c == '0'){
//            JOptionPane.showMessageDialog(comment, "Quantity need more than 0");
//            productQuantity.setText("");
//        }


    }//GEN-LAST:event_productQuantityKeyPressed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        int row = recordTable.getSelectedRow();
        recordDetails.remove(row);

        productCode.setText("");
        sellingPrice.setText("");
        productQuantity.setText("");
        record.setTotalPrice(getTotalPrice());

        loadData();
        tax.setText(Integer.toString(taxPercent));
        total.setText(Float.toString(record.getTotalPrice() * (100 + taxPercent) / 100));
    }//GEN-LAST:event_removeActionPerformed

    private void customerName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerName1ActionPerformed

    private void customerAddress2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerAddress2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerAddress2ActionPerformed

    private void customerPhone2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerPhone2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerPhone2ActionPerformed

    private void searchByTabKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByTabKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = searchByTab.getText();
            loadBySearch(text);
            add.setEnabled(false);
            remove.setEnabled(false);
            edit.setEnabled(false);
            clear.setEnabled(false);
            createRecord.setEnabled(false);
            vat.setEnabled(false);
            remove.setEnabled(true);
        }
    }//GEN-LAST:event_searchByTabKeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
//        new RecordDAO().printInvoice(invoice);
        new RecordDAO().printInvoice(record);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void productQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productQuantityKeyReleased
//        char c = evt.getKeyChar();
//        if(Character.isLetter(c) || Character.isWhitespace(c)) {
//            JOptionPane.showMessageDialog(comment, "You can input only number");
//            productQuantity.setText("");
//        }
//        else{
//            productQuantity.setEditable(true);
//       }
//        try {
//            int i = Integer.parseInt(productQuantity.getText());
//            
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(comment, "You can input only number");
//            productQuantity.setText("");
//        }
        try {
            int i = Integer.parseInt(productQuantity.getText());
            if (i <= 0) {
                JOptionPane.showMessageDialog(comment, "Quantity need more than 0");
                productQuantity.setText("");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(comment, "You can input only number");
            productQuantity.setText("");
        }
    }//GEN-LAST:event_productQuantityKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dashboard db = new dashboard();
        db.setVisible(true);
        this.hide();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        clearActionPerformed(evt);
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        for (Component control : invoice.getComponents()) {
            if (control instanceof JTextField) {
                JTextField ctrl = (JTextField) control;
                ctrl.setText("");
            } else if (control instanceof JComboBox) {
                JComboBox ctrl = (JComboBox) control;
                ctrl.setSelectedIndex(0);
            }
        }

    }//GEN-LAST:event_refreshActionPerformed
    private void loadBySearch(String text) {
        try {
            record = new RecordDAO().getSearchRecordQueryResult(text);
            recordDetails = new RecordDAO().getSearchRecordDetailQueryResult(record);
            if(record.getRecordType() == RecordType.DELETED){
                JOptionPane.showMessageDialog(null, "This record is deleted");
            } else {
                loadData();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot found this record!");
        }
    }

    private boolean checkQuantity(int quantity, int prodID) {
        int currentStock = new CurrentStockDAO().getCurrentStock(prodID);
        if (quantity > currentStock) {
            JOptionPane.showMessageDialog(null, "Quantity entered is greater than the quantity available");
            return false;
        } else if (currentStock == 0) {
            JOptionPane.showMessageDialog(null, "This product is out of stock");
            return false;
        } else if (quantity == currentStock) {
            new ProductDAO().soldOut(product.getProductID());
        }
        return true;
    }

    private void loadData() {
        receiptCode.setText(record.getRecordCode());
        productCode.setText("");
        sellingPrice.setText("");
        productQuantity.setText("");

        record.setTotalPrice(getTotalPrice());
        customer = new CustomerDAO().convertToArrayList(new CustomerDAO().getQueryResult("customerID = '" + record.getCustomerID() + "'")).get(0);
        customerName2.setText(customer.getCustomerName());
        customerCode2.setText((customer.getCustomerCode()));
        customerAddress2.setText(customer.getCustomerAddress());
        customerPhone2.setText(customer.getCustomerPhone());
        receiptDate.setText(record.getDate());
        subtotal.setText(Float.toString(record.getTotalPrice()));
        tax.setText(Integer.toString(record.getVat()));
        total.setText(Float.toString(record.getTotalPrice() * (100 + record.getVat()) / 100));

        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();

        for (RecordDetail rcdt : recordDetails) {
            product = new ProductDAO().convertToArrayList(new ProductDAO().getQueryResult("productID = '" + rcdt.getProductID() + "'")).get(0);
            model.addRow(new Object[]{
                recordDetails.indexOf(rcdt) + 1,
                product.getProductName(),
                product.getProductCode(),
                rcdt.getQuantity(),
                product.getCostPrice(),
                record.getVat(),
                product.getCostPrice() * rcdt.getQuantity()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(exportRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(exportRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(exportRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(exportRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                exportRecord dialog = new exportRecord(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton clear;
    private javax.swing.JTextField comment;
    private javax.swing.JButton createRecord;
    private javax.swing.JTextField customerAddress;
    private javax.swing.JTextField customerAddress2;
    private javax.swing.JTextField customerCode;
    private javax.swing.JTextField customerCode2;
    private javax.swing.JTextField customerName1;
    private javax.swing.JTextField customerName2;
    private javax.swing.JTextField customerPhone;
    private javax.swing.JTextField customerPhone2;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JPanel invoice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField productCode;
    private javax.swing.JTextField productQuantity;
    private javax.swing.JTextField receiptCode;
    private javax.swing.JFormattedTextField receiptDate;
    private javax.swing.JTable recordTable;
    private javax.swing.JButton refresh;
    private javax.swing.JButton remove;
    private javax.swing.JTextField searchByTab;
    private javax.swing.JTextField sellingPrice;
    private javax.swing.JTextField subtotal;
    private javax.swing.JTextField tax;
    private javax.swing.JTextField total;
    private javax.swing.JCheckBox vat;
    // End of variables declaration//GEN-END:variables
}
